"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PLUGIN_REACT_NAME: () => PLUGIN_REACT_NAME,
  isBeyondReact17: () => isBeyondReact17,
  pluginReact: () => pluginReact
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@rsbuild/core");

// src/antd.ts
var import_shared = require("@rsbuild/shared");
var getAntdMajorVersion = (appDirectory) => {
  try {
    const pkgJsonPath = require.resolve("antd/package.json", {
      paths: [appDirectory]
    });
    const { version } = require(pkgJsonPath);
    return Number(version.split(".")[0]);
  } catch (err) {
    return null;
  }
};
var applyAntdSupport = (api) => {
  api.modifyRsbuildConfig((rsbuildConfig) => {
    rsbuildConfig.source ?? (rsbuildConfig.source = {});
    if (rsbuildConfig.source.transformImport === false || rsbuildConfig.source.transformImport?.some(
      (item) => item.libraryName === "antd"
    )) {
      return;
    }
    const antdMajorVersion = getAntdMajorVersion(api.context.rootPath);
    if (antdMajorVersion && antdMajorVersion < 5) {
      rsbuildConfig.source ?? (rsbuildConfig.source = {});
      rsbuildConfig.source.transformImport = [
        ...rsbuildConfig.source.transformImport || [],
        {
          libraryName: "antd",
          libraryDirectory: (0, import_shared.isServerTarget)(api.context.targets) ? "lib" : "es",
          style: true
        }
      ];
    }
  });
};

// src/arco.ts
var import_shared2 = require("@rsbuild/shared");
var applyArcoSupport = (api) => {
  const ARCO_NAME = "@arco-design/web-react";
  const ARCO_ICON = `${ARCO_NAME}/icon`;
  api.modifyRsbuildConfig((rsbuildConfig) => {
    const { transformImport = [] } = rsbuildConfig.source || {};
    if (transformImport === false || !(0, import_shared2.isPackageInstalled)(ARCO_NAME, api.context.rootPath)) {
      return;
    }
    const isUseSSR = (0, import_shared2.isServerTarget)(api.context.targets);
    if (!transformImport?.some((item) => item.libraryName === ARCO_NAME)) {
      transformImport.push({
        libraryName: ARCO_NAME,
        libraryDirectory: isUseSSR ? "lib" : "es",
        camelToDashComponentName: false,
        style: true
      });
    }
    if (!transformImport?.some((item) => item.libraryName === ARCO_ICON)) {
      transformImport.push({
        libraryName: ARCO_ICON,
        libraryDirectory: isUseSSR ? "react-icon-cjs" : "react-icon",
        camelToDashComponentName: false
      });
    }
    rsbuildConfig.source || (rsbuildConfig.source = {});
    rsbuildConfig.source.transformImport = transformImport;
  });
};

// src/splitChunks.ts
var import_shared3 = require("@rsbuild/shared");
var applySplitChunksRule = (api, options = {
  react: true,
  router: true
}) => {
  api.modifyBundlerChain((chain) => {
    const config = api.getNormalizedConfig();
    if (config.performance.chunkSplit.strategy !== "split-by-experience") {
      return;
    }
    const currentConfig = chain.optimization.splitChunks.values();
    if (!(0, import_shared3.isPlainObject)(currentConfig)) {
      return;
    }
    const extraGroups = {};
    if (options.react) {
      extraGroups.react = [
        "react",
        "react-dom",
        "scheduler",
        ...(0, import_shared3.isProd)() ? [] : ["react-refresh", /@rspack[\\/]plugin-react-refresh/]
      ];
    }
    if (options.router) {
      extraGroups.router = [
        "react-router",
        "react-router-dom",
        "history",
        /@remix-run[\\/]router/
      ];
    }
    if (!Object.keys(extraGroups).length) {
      return;
    }
    chain.optimization.splitChunks({
      ...currentConfig,
      cacheGroups: {
        ...currentConfig.cacheGroups,
        ...(0, import_shared3.createCacheGroups)(extraGroups)
      }
    });
  });
};

// src/react.ts
var import_node_path = __toESM(require("path"));
var import_shared4 = require("@rsbuild/shared");
var REACT_REFRESH_PATH = require.resolve("react-refresh");
var REACT_REFRESH_DIR_PATH = import_node_path.default.dirname(REACT_REFRESH_PATH);
var applyBasicReactSupport = (api, options) => {
  api.modifyBundlerChain(async (chain, { CHAIN_ID, isProd: isProd2, target }) => {
    const config = api.getNormalizedConfig();
    const usingHMR = (0, import_shared4.isUsingHMR)(config, { isProd: isProd2, target });
    const reactOptions = {
      development: !isProd2,
      refresh: usingHMR,
      runtime: "automatic",
      ...options.swcReactOptions
    };
    (0, import_shared4.modifySwcLoaderOptions)({
      chain,
      modifier: (options2) => {
        return (0, import_shared4.deepmerge)(options2, {
          jsc: {
            transform: {
              react: reactOptions
            }
          }
        });
      }
    });
    if (!usingHMR) {
      return;
    }
    chain.resolve.alias.set("react-refresh", REACT_REFRESH_DIR_PATH);
    const { default: ReactRefreshRspackPlugin } = await import("@rspack/plugin-react-refresh");
    chain.plugin(CHAIN_ID.PLUGIN.REACT_FAST_REFRESH).use(ReactRefreshRspackPlugin);
  });
};

// src/utils.ts
var import_fs = __toESM(require("fs"));
var import_semver = __toESM(require("@rsbuild/shared/semver"));
var import_shared5 = require("@rsbuild/shared");
var isBeyondReact17 = async (cwd) => {
  const pkgPath = await (0, import_shared5.findUp)({ cwd, filename: "package.json" });
  if (!pkgPath) {
    return false;
  }
  const pkgInfo = JSON.parse(import_fs.default.readFileSync(pkgPath, "utf8"));
  const deps = {
    ...pkgInfo.devDependencies,
    ...pkgInfo.dependencies
  };
  if (typeof deps.react !== "string") {
    return false;
  }
  return import_semver.default.satisfies(import_semver.default.minVersion(deps.react), ">=17.0.0");
};

// src/index.ts
var PLUGIN_REACT_NAME = "rsbuild:react";
var pluginReact = (options = {}) => ({
  name: PLUGIN_REACT_NAME,
  pre: [import_core.PLUGIN_SWC_NAME],
  setup(api) {
    if (api.context.bundlerType === "rspack") {
      applyBasicReactSupport(api, options);
    }
    applyAntdSupport(api);
    applyArcoSupport(api);
    applySplitChunksRule(api, options?.splitChunks);
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PLUGIN_REACT_NAME,
  isBeyondReact17,
  pluginReact
});
