var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// ../../node_modules/.pnpm/@modern-js+module-tools@2.45.0_typescript@5.3.2/node_modules/@modern-js/module-tools/shims/esm.js
import { fileURLToPath } from "url";
import path from "path";

// ../../scripts/requireShims.js
import { createRequire } from "module";
global.require = createRequire(import.meta.url);

// src/index.ts
import { PLUGIN_SWC_NAME } from "@rsbuild/core";

// src/antd.ts
import { isServerTarget } from "@rsbuild/shared";
var getAntdMajorVersion = (appDirectory) => {
  try {
    const pkgJsonPath = __require.resolve("antd/package.json", {
      paths: [appDirectory]
    });
    const { version } = __require(pkgJsonPath);
    return Number(version.split(".")[0]);
  } catch (err) {
    return null;
  }
};
var applyAntdSupport = (api) => {
  api.modifyRsbuildConfig((rsbuildConfig) => {
    rsbuildConfig.source ?? (rsbuildConfig.source = {});
    if (rsbuildConfig.source.transformImport === false || rsbuildConfig.source.transformImport?.some(
      (item) => item.libraryName === "antd"
    )) {
      return;
    }
    const antdMajorVersion = getAntdMajorVersion(api.context.rootPath);
    if (antdMajorVersion && antdMajorVersion < 5) {
      rsbuildConfig.source ?? (rsbuildConfig.source = {});
      rsbuildConfig.source.transformImport = [
        ...rsbuildConfig.source.transformImport || [],
        {
          libraryName: "antd",
          libraryDirectory: isServerTarget(api.context.targets) ? "lib" : "es",
          style: true
        }
      ];
    }
  });
};

// src/arco.ts
import {
  isServerTarget as isServerTarget2,
  isPackageInstalled
} from "@rsbuild/shared";
var applyArcoSupport = (api) => {
  const ARCO_NAME = "@arco-design/web-react";
  const ARCO_ICON = `${ARCO_NAME}/icon`;
  api.modifyRsbuildConfig((rsbuildConfig) => {
    const { transformImport = [] } = rsbuildConfig.source || {};
    if (transformImport === false || !isPackageInstalled(ARCO_NAME, api.context.rootPath)) {
      return;
    }
    const isUseSSR = isServerTarget2(api.context.targets);
    if (!transformImport?.some((item) => item.libraryName === ARCO_NAME)) {
      transformImport.push({
        libraryName: ARCO_NAME,
        libraryDirectory: isUseSSR ? "lib" : "es",
        camelToDashComponentName: false,
        style: true
      });
    }
    if (!transformImport?.some((item) => item.libraryName === ARCO_ICON)) {
      transformImport.push({
        libraryName: ARCO_ICON,
        libraryDirectory: isUseSSR ? "react-icon-cjs" : "react-icon",
        camelToDashComponentName: false
      });
    }
    rsbuildConfig.source || (rsbuildConfig.source = {});
    rsbuildConfig.source.transformImport = transformImport;
  });
};

// src/splitChunks.ts
import {
  isProd,
  isPlainObject,
  createCacheGroups
} from "@rsbuild/shared";
var applySplitChunksRule = (api, options = {
  react: true,
  router: true
}) => {
  api.modifyBundlerChain((chain) => {
    const config = api.getNormalizedConfig();
    if (config.performance.chunkSplit.strategy !== "split-by-experience") {
      return;
    }
    const currentConfig = chain.optimization.splitChunks.values();
    if (!isPlainObject(currentConfig)) {
      return;
    }
    const extraGroups = {};
    if (options.react) {
      extraGroups.react = [
        "react",
        "react-dom",
        "scheduler",
        ...isProd() ? [] : ["react-refresh", /@rspack[\\/]plugin-react-refresh/]
      ];
    }
    if (options.router) {
      extraGroups.router = [
        "react-router",
        "react-router-dom",
        "history",
        /@remix-run[\\/]router/
      ];
    }
    if (!Object.keys(extraGroups).length) {
      return;
    }
    chain.optimization.splitChunks({
      ...currentConfig,
      cacheGroups: {
        ...currentConfig.cacheGroups,
        ...createCacheGroups(extraGroups)
      }
    });
  });
};

// src/react.ts
import path2 from "path";
import {
  deepmerge,
  isUsingHMR,
  modifySwcLoaderOptions
} from "@rsbuild/shared";
var REACT_REFRESH_PATH = __require.resolve("react-refresh");
var REACT_REFRESH_DIR_PATH = path2.dirname(REACT_REFRESH_PATH);
var applyBasicReactSupport = (api, options) => {
  api.modifyBundlerChain(async (chain, { CHAIN_ID, isProd: isProd2, target }) => {
    const config = api.getNormalizedConfig();
    const usingHMR = isUsingHMR(config, { isProd: isProd2, target });
    const reactOptions = {
      development: !isProd2,
      refresh: usingHMR,
      runtime: "automatic",
      ...options.swcReactOptions
    };
    modifySwcLoaderOptions({
      chain,
      modifier: (options2) => {
        return deepmerge(options2, {
          jsc: {
            transform: {
              react: reactOptions
            }
          }
        });
      }
    });
    if (!usingHMR) {
      return;
    }
    chain.resolve.alias.set("react-refresh", REACT_REFRESH_DIR_PATH);
    const { default: ReactRefreshRspackPlugin } = await import("@rspack/plugin-react-refresh");
    chain.plugin(CHAIN_ID.PLUGIN.REACT_FAST_REFRESH).use(ReactRefreshRspackPlugin);
  });
};

// src/utils.ts
import fs from "fs";
import semver from "@rsbuild/shared/semver";
import { findUp } from "@rsbuild/shared";
var isBeyondReact17 = async (cwd) => {
  const pkgPath = await findUp({ cwd, filename: "package.json" });
  if (!pkgPath) {
    return false;
  }
  const pkgInfo = JSON.parse(fs.readFileSync(pkgPath, "utf8"));
  const deps = {
    ...pkgInfo.devDependencies,
    ...pkgInfo.dependencies
  };
  if (typeof deps.react !== "string") {
    return false;
  }
  return semver.satisfies(semver.minVersion(deps.react), ">=17.0.0");
};

// src/index.ts
var PLUGIN_REACT_NAME = "rsbuild:react";
var pluginReact = (options = {}) => ({
  name: PLUGIN_REACT_NAME,
  pre: [PLUGIN_SWC_NAME],
  setup(api) {
    if (api.context.bundlerType === "rspack") {
      applyBasicReactSupport(api, options);
    }
    applyAntdSupport(api);
    applyArcoSupport(api);
    applySplitChunksRule(api, options?.splitChunks);
  }
});
export {
  PLUGIN_REACT_NAME,
  isBeyondReact17,
  pluginReact
};
